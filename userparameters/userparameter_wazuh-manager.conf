### WAZUH MANAGER — UserParameters ###
# Host: este arquivo é para o NÓ do Manager
# Teste local: zabbix_agent2 -t <chave>

# --- Serviço systemd ---
UserParameter=wazuh.manager.service,systemctl is-active wazuh-manager.service

# --- Status geral (wazuh-control status) ---
UserParameter=wazuh.manager.status,/usr/bin/wazuh-control status | grep -i "wazuh-manager" | awk '{print $NF}'

# --- Agentes conectados ---
UserParameter=wazuh.manager.agents.connected,sudo /var/ossec/bin/agent_control -l | grep 'Active' | wc -l
UserParameter=wazuh.manager.agents.total,sudo /var/ossec/bin/agent_control -l | grep -v "ID" | wc -l
UserParameter=wazuh.manager.agents.disconnected,DISCONNECTED=$(expr $(sudo /var/ossec/bin/agent_control -l 2>/dev/null | grep -v "ID" | wc -l) - $(sudo /var/ossec/bin/agent_control -l 2>/dev/null | grep 'Active' | wc -l)); if [ $DISCONNECTED -lt 0 ]; then echo 0; else echo $DISCONNECTED; fi

# --- Estatísticas do Manager (eventos processados, filas, etc.) ---
UserParameter=wazuh.manager.stats.raw,sudo cat /var/ossec/var/run/wazuh-modulesd.state | jq -c .
UserParameter=wazuh.manager.queue.events,/var/ossec/bin/wazuh-logtest -h 2>/dev/null | grep "queue" | awk '{print $NF}'

# --- Health API (status HTTP) ---
### --- Wazuh API via Token JWT --- ###
UserParameter=wazuh.manager.api.status,TOKEN=$(curl -s -k -u wazuh-wui:wazuh-wui -X POST "https://192.168.10.46:55000/security/user/authenticate?raw=true"); curl -s -o /dev/null -w "%{http_code}" -k -H "Authorization: Bearer $TOKEN" "https://192.168.10.46:55000/"
UserParameter=wazuh.manager.api.version,TOKEN=$(curl -s -k -u wazuh-wui:wazuh-wui -X POST "https://192.168.10.46:55000/security/user/authenticate?raw=true"); curl -s -k -H "Authorization: Bearer $TOKEN" "https://192.168.10.46:55000/" | jq -r '.data.api_version // .api_version // empty'


# --- Logs recentes de erro ---
UserParameter=wazuh.manager.errors.5min,grep -i "error" /var/ossec/logs/ossec.log | tail -n 20 | wc -l

# --- Uso de disco da pasta var/ossec ---
UserParameter=wazuh.manager.disk.usage,du -s /var/ossec/ | awk '{print $1}'
UserParameter=wazuh.manager.disk.free,df -B1 /var/ossec/ | awk 'NR==2 {print $4}'
UserParameter=wazuh.manager.disk.total,df -B1 /var/ossec/ | awk 'NR==2 {print $2}'

# --- Healthcheck interno (tudo OK = 1, problema = 0) ---
UserParameter=wazuh.manager.healthcheck,([ "$(systemctl is-active wazuh-manager)" = "active" ] && TOKEN=$(curl -s -k -u wazuh-wui:wazuh-wui -X POST "https://192.168.10.46:55000/security/user/authenticate?raw=true"); [ $(curl -s -o /dev/null -w "%{http_code}" -k -H "Authorization: Bearer $TOKEN" "https://192.168.10.46:55000/") -eq 200 ]) && echo 1 || echo 0

### --- Verificação das portas críticas do Wazuh Manager --- ###
# Retorna 1 se a porta estiver ouvindo (LISTEN), 0 se não estiver

# Porta 1515 — Registro de agentes
UserParameter=wazuh.manager.port.1515,ss -ltn '( sport = :1515 )' | grep -q LISTEN && echo 1 || echo 0

# Porta 1514 — Recebimento de logs dos agentes
UserParameter=wazuh.manager.port.1514,ss -ltn '( sport = :1514 )' | grep -q LISTEN && echo 1 || echo 0

# Porta 1415 — Comunicação de cluster
UserParameter=wazuh.manager.port.1415,ss -ltn '( sport = :1415 )' | grep -q LISTEN && echo 1 || echo 0

# Porta 55000 — API REST (para o dashboard e integrações)
UserParameter=wazuh.manager.port.55000,ss -ltn '( sport = :55000 )' | grep -q LISTEN && echo 1 || echo 0
